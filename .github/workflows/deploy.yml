name: Deploy

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

  security-check:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build:
    runs-on: ubuntu-latest
    needs: security-check

    steps:
    - name: Check out the repo
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Necessary to fetch all tags and history

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-3

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Extract repository name and set environment variables
      run: |
        echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
        echo "ECR_REGISTRY=$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.ap-southeast-3.amazonaws.com" >> $GITHUB_ENV
        echo "IMAGE_TAG=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        docker build -t $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG .
        echo "IMAGE_NAME=$ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'MEDIUM,CRITICAL,HIGH'
      continue-on-error: false

    - name: Push Docker image to Amazon ECR
      run: |
        # Tag the image as latest
        docker tag $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG $ECR_REGISTRY/$REPO_NAME:latest
        # Push the specific version tag
        docker push $ECR_REGISTRY/$REPO_NAME:$IMAGE_TAG
        # Push the latest tag
        docker push $ECR_REGISTRY/$REPO_NAME:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: deploy to ec2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          cd /home/ubuntu/docker/express-api
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ap-southeast-3
          aws ecr get-login-password --region ap-southeast-3 | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.ap-southeast-3.amazonaws.com
          docker image prune -a -f
          docker compose pull
          docker compose up -d
